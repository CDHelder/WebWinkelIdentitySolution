// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebWinkelIdentity.Data;

namespace WebWinkelIdentity.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210707170258_AddColours")]
    partial class AddColours
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.Enitities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Streetname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Amsterdam",
                            Country = "Netherlands",
                            HouseNumber = 15,
                            PostalCode = "1264 KJ",
                            Streetname = "Polderweg",
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 2,
                            City = "Rotterdam",
                            Country = "Netherlands",
                            CustomerId = "52a5d716-a649-4476-b316-108d96c56112",
                            HouseNumber = 5,
                            PostalCode = "7431 GG",
                            Streetname = "Sesamstraat"
                        },
                        new
                        {
                            Id = 3,
                            City = "Den Haag",
                            Country = "Netherlands",
                            HouseNumber = 26,
                            PostalCode = "8137 YA",
                            Streetname = "Korte poten"
                        },
                        new
                        {
                            Id = 4,
                            City = "Rotterdam",
                            Country = "Netherlands",
                            HouseNumber = 12,
                            PostalCode = "6573 IK",
                            Streetname = "Lijnbaan"
                        });
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.Enitities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 2,
                            CustomerId = "52a5d716-a649-4476-b316-108d96c56112",
                            IsDelivered = false
                        });
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.Enitities.OrderProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 1,
                            ProductId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 2,
                            OrderId = 1,
                            ProductId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 3,
                            OrderId = 1,
                            ProductId = 3,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 4,
                            OrderId = 1,
                            ProductId = 4,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.Enitities.ProductEntities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Veel te duur",
                            Name = "Gucci",
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Veel te duur",
                            Name = "Versace",
                            SupplierId = 1
                        });
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.Enitities.ProductEntities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Broek met wijde pijpen",
                            Name = "Broek"
                        },
                        new
                        {
                            Id = 2,
                            Description = "T-shirt met korte mouwen",
                            Name = "T-shirt"
                        });
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.Enitities.StoreEntities.DayOpeningTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan?>("ClosingTime")
                        .HasColumnType("time");

                    b.Property<string>("Day")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("OpeningTime")
                        .HasColumnType("time");

                    b.Property<int>("WeekOpeningTimesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeekOpeningTimesId");

                    b.ToTable("DayOpeningTimes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClosingTime = new TimeSpan(0, 17, 0, 0, 0),
                            Day = "Monday",
                            IsClosed = false,
                            OpeningTime = new TimeSpan(0, 9, 0, 0, 0),
                            WeekOpeningTimesId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClosingTime = new TimeSpan(0, 17, 0, 0, 0),
                            Day = "Tuesday",
                            IsClosed = false,
                            OpeningTime = new TimeSpan(0, 9, 0, 0, 0),
                            WeekOpeningTimesId = 1
                        },
                        new
                        {
                            Id = 3,
                            ClosingTime = new TimeSpan(0, 17, 0, 0, 0),
                            Day = "Wednesday",
                            IsClosed = false,
                            OpeningTime = new TimeSpan(0, 9, 0, 0, 0),
                            WeekOpeningTimesId = 1
                        },
                        new
                        {
                            Id = 4,
                            ClosingTime = new TimeSpan(0, 17, 0, 0, 0),
                            Day = "Thursday",
                            IsClosed = false,
                            OpeningTime = new TimeSpan(0, 9, 0, 0, 0),
                            WeekOpeningTimesId = 1
                        },
                        new
                        {
                            Id = 5,
                            ClosingTime = new TimeSpan(0, 17, 0, 0, 0),
                            Day = "Friday",
                            IsClosed = false,
                            OpeningTime = new TimeSpan(0, 9, 0, 0, 0),
                            WeekOpeningTimesId = 1
                        },
                        new
                        {
                            Id = 6,
                            ClosingTime = new TimeSpan(0, 17, 0, 0, 0),
                            Day = "Saterday",
                            IsClosed = false,
                            OpeningTime = new TimeSpan(0, 9, 0, 0, 0),
                            WeekOpeningTimesId = 1
                        },
                        new
                        {
                            Id = 7,
                            Day = "Sunday",
                            IsClosed = true,
                            WeekOpeningTimesId = 1
                        });
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.Enitities.StoreEntities.ProductDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountInStock")
                        .HasColumnType("int");

                    b.Property<string>("InternationalSizingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountInStock = 2,
                            InternationalSizingType = "EU",
                            ProductId = 1,
                            Size = "S"
                        },
                        new
                        {
                            Id = 2,
                            AmountInStock = 2,
                            InternationalSizingType = "EU",
                            ProductId = 1,
                            Size = "M"
                        },
                        new
                        {
                            Id = 3,
                            AmountInStock = 2,
                            InternationalSizingType = "EU",
                            ProductId = 1,
                            Size = "L"
                        },
                        new
                        {
                            Id = 4,
                            AmountInStock = 1,
                            InternationalSizingType = "EU",
                            ProductId = 1,
                            Size = "XL"
                        },
                        new
                        {
                            Id = 5,
                            AmountInStock = 2,
                            InternationalSizingType = "EU",
                            ProductId = 2,
                            Size = "S"
                        },
                        new
                        {
                            Id = 6,
                            AmountInStock = 2,
                            InternationalSizingType = "EU",
                            ProductId = 2,
                            Size = "M"
                        },
                        new
                        {
                            Id = 7,
                            AmountInStock = 2,
                            InternationalSizingType = "EU",
                            ProductId = 2,
                            Size = "L"
                        },
                        new
                        {
                            Id = 8,
                            AmountInStock = 1,
                            InternationalSizingType = "EU",
                            ProductId = 2,
                            Size = "XL"
                        },
                        new
                        {
                            Id = 9,
                            AmountInStock = 2,
                            InternationalSizingType = "EU",
                            ProductId = 3,
                            Size = "S"
                        },
                        new
                        {
                            Id = 10,
                            AmountInStock = 2,
                            InternationalSizingType = "EU",
                            ProductId = 3,
                            Size = "M"
                        },
                        new
                        {
                            Id = 11,
                            AmountInStock = 2,
                            InternationalSizingType = "EU",
                            ProductId = 3,
                            Size = "L"
                        },
                        new
                        {
                            Id = 12,
                            AmountInStock = 1,
                            InternationalSizingType = "EU",
                            ProductId = 3,
                            Size = "XL"
                        },
                        new
                        {
                            Id = 13,
                            AmountInStock = 2,
                            InternationalSizingType = "EU",
                            ProductId = 4,
                            Size = "S"
                        },
                        new
                        {
                            Id = 14,
                            AmountInStock = 2,
                            InternationalSizingType = "EU",
                            ProductId = 4,
                            Size = "M"
                        },
                        new
                        {
                            Id = 15,
                            AmountInStock = 2,
                            InternationalSizingType = "EU",
                            ProductId = 4,
                            Size = "L"
                        },
                        new
                        {
                            Id = 16,
                            AmountInStock = 1,
                            InternationalSizingType = "EU",
                            ProductId = 4,
                            Size = "XL"
                        });
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.Enitities.StoreEntities.StoreEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreEmployees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmployeeId = "7036d951-7cc8-488f-b95b-10c2e96c31c9",
                            StoreId = 1
                        });
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.Enitities.StoreEntities.StoreProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "StoreId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreProducts");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            StoreId = 1
                        });
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.Enitities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "groothandel merkkleding",
                            Email = "GroothandelDeBos@gmail.com",
                            Name = "Kleding Groothandel de Bos",
                            PhoneNumber = 1012346543
                        });
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.StoreEntities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fabric")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CategoryId = 2,
                            Color = "White",
                            Description = "Witte kleur met gucci logo",
                            Fabric = "100% Cotton",
                            Name = "Gucci T-shirt",
                            Price = 39.95m
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            CategoryId = 1,
                            Color = "Light-Blue",
                            Description = "Lichte broek met gucci logo",
                            Fabric = "100% Cotton",
                            Name = "Gucci Broek",
                            Price = 59.95m
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 2,
                            CategoryId = 2,
                            Color = "Light-Yellow",
                            Description = "Licht shirt met versace logo",
                            Fabric = "100% Cotton",
                            Name = "Versace T-shirt",
                            Price = 45.95m
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 2,
                            CategoryId = 1,
                            Color = "Dark-Blue",
                            Description = "Donkere broek met versace logo",
                            Fabric = "100% Cotton",
                            Name = "Versace Broek",
                            Price = 69.95m
                        });
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.StoreEntities.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("WeekOpeningTimesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("WeekOpeningTimesId")
                        .IsUnique();

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 4,
                            WeekOpeningTimesId = 1
                        });
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.StoreEntities.WeekOpeningTimes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("WeekOpeningTimes");

                    b.HasData(
                        new
                        {
                            Id = 1
                        });
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.Enitities.Customer", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = "52a5d716-a649-4476-b316-108d96c56112",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "64526f2f-96d9-49a6-8772-7fc526cf28e6",
                            Email = "Jaap@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5532a4d7-ec62-4cc5-b51f-620ee5937f8a",
                            TwoFactorEnabled = false,
                            UserName = "Jaap123",
                            Name = "Jaap"
                        });
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.Enitities.Users.Employee", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<bool>("CurrentlyEmployed")
                        .HasColumnType("bit");

                    b.Property<string>("IBAN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[AddressId] IS NOT NULL");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = "7036d951-7cc8-488f-b95b-10c2e96c31c9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "51b9d2f3-13ab-4fdc-9da3-8e9f965fb7cb",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2721a134-e95a-4114-a68c-bc4187f403ce",
                            TwoFactorEnabled = false,
                            AddressId = 3,
                            CurrentlyEmployed = false,
                            IBAN = "NL76 INGB 007 4201 6969",
                            Name = "Samantha"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.Enitities.Address", b =>
                {
                    b.HasOne("WebWinkelIdentity.Data.Enitities.Customer", null)
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId");

                    b.HasOne("WebWinkelIdentity.Data.Enitities.Supplier", null)
                        .WithMany("Addresses")
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.Enitities.Order", b =>
                {
                    b.HasOne("WebWinkelIdentity.Data.Enitities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebWinkelIdentity.Data.Enitities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.Enitities.OrderProduct", b =>
                {
                    b.HasOne("WebWinkelIdentity.Data.Enitities.Order", null)
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebWinkelIdentity.Data.StoreEntities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.Enitities.ProductEntities.Brand", b =>
                {
                    b.HasOne("WebWinkelIdentity.Data.Enitities.Supplier", "Supplier")
                        .WithMany("Brands")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.Enitities.StoreEntities.DayOpeningTime", b =>
                {
                    b.HasOne("WebWinkelIdentity.Data.StoreEntities.WeekOpeningTimes", null)
                        .WithMany("DayOpeningTimes")
                        .HasForeignKey("WeekOpeningTimesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.Enitities.StoreEntities.ProductDetails", b =>
                {
                    b.HasOne("WebWinkelIdentity.Data.StoreEntities.Product", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.Enitities.StoreEntities.StoreEmployee", b =>
                {
                    b.HasOne("WebWinkelIdentity.Data.Enitities.Users.Employee", "Employee")
                        .WithMany("EmployeeStores")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("WebWinkelIdentity.Data.StoreEntities.Store", "Store")
                        .WithMany("StoreEmployees")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.Enitities.StoreEntities.StoreProduct", b =>
                {
                    b.HasOne("WebWinkelIdentity.Data.StoreEntities.Product", "Product")
                        .WithMany("StoreProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebWinkelIdentity.Data.StoreEntities.Store", "Store")
                        .WithMany("StoreProducts")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.StoreEntities.Product", b =>
                {
                    b.HasOne("WebWinkelIdentity.Data.Enitities.ProductEntities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebWinkelIdentity.Data.Enitities.ProductEntities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.StoreEntities.Store", b =>
                {
                    b.HasOne("WebWinkelIdentity.Data.Enitities.Address", "Address")
                        .WithOne()
                        .HasForeignKey("WebWinkelIdentity.Data.StoreEntities.Store", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebWinkelIdentity.Data.StoreEntities.WeekOpeningTimes", "WeekOpeningTimes")
                        .WithOne()
                        .HasForeignKey("WebWinkelIdentity.Data.StoreEntities.Store", "WeekOpeningTimesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("WeekOpeningTimes");
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.Enitities.Customer", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithOne()
                        .HasForeignKey("WebWinkelIdentity.Data.Enitities.Customer", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.Enitities.Users.Employee", b =>
                {
                    b.HasOne("WebWinkelIdentity.Data.Enitities.Address", "Address")
                        .WithOne()
                        .HasForeignKey("WebWinkelIdentity.Data.Enitities.Users.Employee", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithOne()
                        .HasForeignKey("WebWinkelIdentity.Data.Enitities.Users.Employee", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.Enitities.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.Enitities.ProductEntities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.Enitities.ProductEntities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.Enitities.Supplier", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Brands");
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.StoreEntities.Product", b =>
                {
                    b.Navigation("ProductDetails");

                    b.Navigation("StoreProducts");
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.StoreEntities.Store", b =>
                {
                    b.Navigation("StoreEmployees");

                    b.Navigation("StoreProducts");
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.StoreEntities.WeekOpeningTimes", b =>
                {
                    b.Navigation("DayOpeningTimes");
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.Enitities.Customer", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("WebWinkelIdentity.Data.Enitities.Users.Employee", b =>
                {
                    b.Navigation("EmployeeStores");
                });
#pragma warning restore 612, 618
        }
    }
}
